plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.8'
	id 'io.spring.dependency-management' version '1.1.0'
	id 'jacoco'
}

group = 'com.jycforest29'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

jacoco {
	toolVersion = "0.8.5"
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	// validation
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: '2.7.2'
	// security
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: '2.7.8'
	implementation group: 'org.springframework.security', name: 'spring-security-core', version: '5.7.5'
	implementation group: 'org.springframework.security', name: 'spring-security-web', version: '5.7.5'
	implementation group: 'org.springframework.security', name: 'spring-security-config', version: '5.7.5'
	// jwt
	implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
	// mysql
	implementation group: 'mysql', name: 'mysql-connector-java', version: '8.0.30'
	// mongo
//	implementation group: 'org.mongodb', name: 'mongo-java-driver', version: '3.12.12'
	// websocket
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-websocket', version: '2.7.6'
	// redis
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-redis', version: '2.7.2'
	// cache
	implementation 'org.springframework.boot:spring-boot-starter-cache'
	implementation 'org.hibernate:hibernate-ehcache:5.6.5.Final'
	implementation group: 'net.sf.ehcache', name: 'ehcache', version: '2.10.9.2'
	// json
	implementation group: 'com.jayway.jsonpath', name: 'json-path', version: '2.7.0'
	// batch
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-batch', version: '2.7.2'


	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	// lombok
	compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.24'
	annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.24'
	// security
	testImplementation group: 'org.springframework.security', name: 'spring-security-test', version: '5.7.5'
	// jwt
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-impl', version: '0.11.5'
	runtimeOnly group: 'io.jsonwebtoken', name: 'jjwt-jackson', version: '0.11.5'
	// final 클래스, static 메서드 모킹 위해 필요
	testImplementation group: 'org.mockito', name: 'mockito-inline', version: '5.1.1'
	// lombok - test 환경에서 slf4j를 사용하기 위해 필요
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
	// test container
	testImplementation group: 'org.testcontainers', name: 'testcontainers', version: '1.17.6'
	testImplementation group: 'org.testcontainers', name: 'junit-jupiter', version: '1.17.6'
	testImplementation group: 'org.testcontainers', name: 'mysql', version: '1.17.6'
}

test {
	useJUnitPlatform()
	finalizedBy 'jacocoTestReport'
}

jacocoTestReport {
	reports {
		html.enabled true
		xml.enabled false
		csv.enabled false
	}

	afterEvaluate {
		classDirectories.setFrom(
				files(classDirectories.files.collect {
					fileTree(dir: it, excludes: [
					        "**/*Application",
							"**/*Config",
							"**/*Dto",
							"**/*Request",
							"**/*Response",
							"**/*Exception",
							"**/*Repository"
					])
				})
		)
	}
	finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			element = 'CLASS'
			enabled = true

			limit {
				counter = 'LINE'
				value = 'COVEREDRATIO'
			}

			excludes = [
//					"**/*Application",
//					"**/*Config",
//					"**/*Dto",
//					"**/*Request",
//					"**/*Response",
//					"**/*Exception",
//					"**/*Repository"
					"*.CacheConfig"
			]
		}
	}
}

