version: "3"
services:
  databases:
    image: mysql
    container_name: mysql-container
    restart: on-failure
    environment: # 해당 이미지가 사용할 환경 변수 설정
      MYSQL_DATABASE: commercedb
      MYSQL_ROOT_PASSWORD: 1234
    ports: # 호스트에서 접속할 외부 포트 : 도커 내부의 실제 포트(도커 이미지들간의 통신에 사용)
      - "3307:3306"
    volumes:
      - mysql-data:/var/lib/mysql
    command:
      - "--character-set-server=utf8mb4"
      - "--collation-server=utf8mb4_unicode_ci"
    networks:
      - test_network
    healthcheck: # db 생성 후 app_for_test 컨테이너 생성하도록
      test: ["CMD", "mysqladmin ping -h 127.0.0.1 -u root --password=$$MYSQL_ROOT_PASSWORD"]
      interval: 10s
      timeout: 2s
      retries: 100

  redis:
    image: redis
    container_name: redis-container
    restart: on-failure
    hostname: localhost
    ports:
      - "6379:6379"
    networks:
      - test_network
    healthcheck: # db 생성 후 app_for_test 컨테이너 생성하도록
      test: ["CMD", "redis-cli ping"]
      interval: 10s
      timeout: 2s
      retries: 100

  application:
    container_name: app_for_test
    restart: on-failure
    build:
      context: ./
      dockerfile: Dockerfile
    expose:
      - "8080"
    ports:
      - "8080:8080"
    depends_on:
      - databases
      - redis
#      databases:
#        condition: service_healthy
#      redis:
#        condition: service_healthy
    networks:
      - test_network

# 컨테이너 간 통신을 컨테이너의 이름으로 하기 위해서는 커스텀 네트워크를 생성하고
# 해당 네트워크에 컨테이너를 생성해야 함
networks:
  test_network:


volumes:
  mysql-data:
